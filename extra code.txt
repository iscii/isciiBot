/*
//initialization functions
function initialize(){
    iMusic();
}
function iMusic(){
    currentSong = "";
    playCooldown = true;
    repeat = false;

    
            //music
            
            case "play": //learn whatever goes on in here lmao
                //BUG: when you skip, the player sometimes freezes and the play function is not called. comtinue calling skip and the queue will not skip the next song.
                if(playCooldown){
                    if(!args[1]) return msg.reply("Please provide a link to the music.");
                    if(!msg.member.voiceChannel) return msg.reply("You must be in a voice channel.");
                    if(!servers[msg.guild.id]) servers[msg.guild.id] = {queue:[]}
                    playCooldown = !playCooldown; //sets to false so user cannot add a song till the promise is returned
                    var server = servers[msg.guild.id];
                    function play(connection, msg){
                        console.log("play");
                        var prevMsg = msg;
                        server.dispatcher = connection.playStream(ytdl(server.queue[0].url, {filter: "audioonly"}));
                        currentSong = [server.queue[0].songTitle, args[1]];
                        msg.channel.send("Playing [" + server.queue[0].songTitle + "]");
                        if(!repeat)
                            server.queue.shift();
                        server.dispatcher.on("end", function(){
                            if (server.queue[0]){
                                play(connection, msg);
                            }
                            else {
                                connection.disconnect();
                            }
                        })
                    }
                    var server = servers[msg.guild.id];
                    ytdl.getInfo(link, async (err, info) => {
                        if(err) console.log(err);
                        if(ytdl.validateURL(link)){
                            server.queue.push({
                                songTitle: info.title,
                                url: link,
                                requester: msg.author.tag,
                                announceChannel: msg.channel.id
                            });
                            if(server.dispatcher){
                                msg.channel.send("Added [" + server.queue[server.queue.length - 1].songTitle + "] to the queue.");
                            }
                        }
                        else {
                            return msg.channel.send("Please input a valid URL.");
                        }
                        if(!msg.guild.voiceConnection) msg.member.voiceChannel.join().then(function(connection){ //learn how this works
                            play(connection, msg);
                        })
                        playCooldown = !playCooldown; //sets to true so user can call command
                    });
                }
                else
                    msg.reply("You must wait a bit before adding another song.");
            break;
            case "skip":
                if(playCooldown){
                    playCooldown = !playCooldown;
                    var server = servers[msg.guild.id];
                    msg.channel.send("Skipped [" + currentSong[0] + "]");
                    if(server.dispatcher) server.dispatcher.end(); //figure out what server.dispatcher does
                    playCooldown = !playCooldown;
                }
                else
                    msg.reply("You must wait a bit before skipping another song.");
            break;
            case "stop":
                var server = servers[msg.guild.id];
                console.log("stop");
                if(msg.guild.voiceConnection){
                    for (var i = server.queue.length - 1; i <= 0; i--){
                        server.queue.splice(i, 1);
                    }
                    server.dispatcher.end();
                    msg.channel.send("Music stopped.");
                }
                if(msg.guild.connection){
                    console.log("dc");
                    msg.guild.voiceConnection.disconnect();
                } 
            break;
            case "join":
                if(!msg.guild.voiceConnection){ //checks if the bot is already in a voice channel
                    if(msg.member.voiceChannel){ //checks if the member is in a voice channel
                        msg.member.voiceChannel.join();
                        msg.channel.send("Joining voice channel.");
                    }
                    else {
                        msg.channel.send("You are not in a voice channel.");
                    }
                }
                else {
                    return msg.channel.send("Bot is already in a voice channel.");
                }
            break;
            case "leave":
                if(msg.guild.voiceConnection){
                    msg.guild.voiceConnection.disconnect();
                    msg.channel.send("Leaving voice channel.");
                }
                else {
                    return msg.channel.send("Bot is not in a voice channel.");
                }
            break;
            case "queue":
                var server = servers[msg.guild.id];
                if(server.queue[0]){
                    var queueMsg = "1: [" + currentSong[0] + "]\nLink: " + currentSong[1];
                    for (i = 0; i < server.queue.length; i++){
                        queueMsg += "\n" + (i + 2) + ": [" + server.queue[i].songTitle;
                    }
                    msg.channel.send(queueMsg);
                }
                else msg.channel.send("There are no songs in the queue.");
            break;
            

}
function iVariables(){
    //cooldowns
    //let cooldown = new Set(); //command cooldown -- COOLDOWNS
    //let cdTime = 2; //time in seconds
}
*/